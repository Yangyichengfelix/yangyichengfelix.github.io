@inject HttpClient _httpClient
@inject IJSRuntime JSRuntime
    <MudButton class="mb-2" OnClick=UpdateChartSeries Color="Color.Primary">Update Series</MudButton>

    @if (forecasts != null)
    {
    <ApexChart TItem="DogBreedModel"
                   Title="Temp C"
        @ref="chart">

        <ApexPointSeries TItem="DogBreedModel"
                             Items="forecasts"
                             Name="Temp C"
                             XValue="@(e => e.BreedName)"
                             YValue="@(e =>e.BreedName.Length)"
                             SeriesType="SeriesType.Donut" />
        </ApexChart>
    }


@code {
    [Inject, NotNull] IConfiguration? configuration { get; set; }
    private List<DogBreedModel> forecasts { get; set; }
    private ApexChart<DogBreedModel> chart;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync(2); // get small sample first

        await base.OnInitializedAsync();
    }

    private async Task LoadDataAsync(int? limit)
    {
#if DEBUG
        string rootPath = configuration.GetValue<string>("rootPath") ?? throw new ArgumentNullException(nameof(rootPath));
#else
        string rootPath = configuration.GetValue<string>("githubLink") ?? throw new ArgumentNullException(nameof(rootPath));
#endif
        var response =await _httpClient.GetFromJsonAsync<List<DogBreedModel>>($"{rootPath}/races_chien.json");

   

        var groupedData = response.GroupBy(x => x.BreedName)               
                          .ToList();

    }

    private async Task UpdateChartSeries()
    {
        await LoadDataAsync(null); // get full sample on update
        await chart.UpdateOptionsAsync(true, true, false);
    }
}